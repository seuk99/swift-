
import UIKit
import MobileCoreServices

class ViewController: UIViewController, UINavigationControllerDelegate,
                      UIImagePickerControllerDelegate {

    @IBOutlet var imgView: UIImageView!
    
    let imagepicker: UIImagePickerController! = UIImagePickerController()
    var captureImage: UIImage!
    var videoURL: URL!
    var flagImageSave = false
    
    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
    }
    @IBAction func btnCaptureImageFromCamera(_ sender: UIButton) {
        if (UIImagePickerController.isSourceTypeAvailable(.camera)){
            flagImageSave = true
            
            imagepicker.delegate = self
            imagepicker.sourceType = .camera
            imagepicker.mediaTypes = ["public.movie"]
            imagepicker.allowsEditing = false
            
            present(imagepicker, animated: true, completion: nil)
        }
        else {
            myAlert("Camera inaccessable", message: "Application cannot access the camera.")
        }
    }
    @IBAction func btnLoadImageFromLibrary(_ sender: UIButton) {
        if (UIImagePickerController.isSourceTypeAvailable(.photoLibrary)){
            flagImageSave = false
            
            imagepicker.delegate = self
            imagepicker.sourceType = .photoLibrary
            imagepicker.mediaTypes = ["public.image"]
            imagepicker.allowsEditing = true
            
            present(imagepicker, animated: true, completion: nil)
        }
        else {
            myAlert("photo album inacceeable", message: "Applicatin cannot access the photo album.")
        }
    }
    @IBAction func btnRecordVidieoFromCamera(_ sender: UIButton) {
        if (UIImagePickerController.isSourceTypeAvailable(.camera)){
            flagImageSave = true
            
            imagepicker.delegate = self
            imagepicker.sourceType = .camera
            imagepicker.mediaTypes = ["public.movie"]
            imagepicker.allowsEditing = false
            
            present(imagepicker, animated: true, completion:  nil)
        }
        else {
            myAlert("Camera inaccessable", message: "Application cannot access the camera")
        }
    }
    @IBAction func btnLoadVideoFromLibrary(_ sender: UIButton) {
        if (UIImagePickerController.isSourceTypeAvailable(.photoLibrary)){
            flagImageSave = false
            
            imagepicker.delegate = self
            imagepicker.sourceType = .photoLibrary
            imagepicker.mediaTypes = ["public.movie"]
            imagepicker.allowsEditing = false
            
            present(imagepicker, animated: true, completion: nil)
        }
        else {
            myAlert("photo album inacceeable", message: "Applicatin cannot access the photo album.")
        }
    }
    func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [UIImagePickerController.InfoKey : Any]) {
        let mediaType = info[UIImagePickerController.InfoKey.mediaType]
        as! NSString
        
        if mediaType.isEqual(to: "public.image" as String) {
            captureImage = info[UIImagePickerController.InfoKey.originalImage]
            as? UIImage
            
            if flagImageSave {
                UIImageWriteToSavedPhotosAlbum(captureImage, self, nil, nil)
            }
            imgView.image = captureImage
        }
            else if mediaType.isEqual(to: "public.movie" as String) {
                if flagImageSave {
                    videoURL = (info[UIImagePickerController.InfoKey.mediaURL]
                                as! URL)
                    
                    UISaveVideoAtPathToSavedPhotosAlbum(videoURL.relativePath, self, nil, nil)
                }
            }
            self.dismiss(animated: true, completion: nil)
    }
        func imagePickerControllerDidCancel(_ picker: UIImagePickerController){
            self.dismiss(animated: true, completion: nil)
        }
    
    func myAlert(_ title: String, message: String) {
        let alert = UIAlertController(title: title, message: message, preferredStyle: UIAlertController.Style.alert)
        let action = UIAlertAction(title: "ok", style: UIAlertAction.Style.default, handler: nil)
        alert.addAction(action)
        self.present(alert, animated: true, completion: nil)
    }
}

